/*! ngForce 2014-07-10 */
/*! visit https://noeticpenguin.github.io/ngForce for more info. */

"use strict";
angular.module("ngForce").factory("encodeUriQuery", function() {
	function a(a, b) {
		return encodeURIComponent(a).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, b ? "%20" : "+")
	}
	return a
}), angular.module("ngForce").provider("remoteObjects", ["$q", "$log",
	function(a) {
		this.$get = function() {
			var b = "SObjectModel";
			this.setNamespace = function(a) {
				_.isUndefined(a) || (b = a)
			};
			var c = {
				getPromiseObj: function(c) {
					var d = {};
					return d.remoteObj = new b[c], d.retrieve = function() {
						d.remoteObj.retrieve(opts, this.handleWithPromise)
					}, d.create = function(a) {
						a = a ? a : d.remoteObj._props, d.remoteObj.create(a, handleWithPromise)
					}, d.update = function(a, b) {
						angular._isArray(a) || (b = a, a = null), a = a ? a : [d.remoteObj._props.Id], b = b ? b : d.remoteObj._props, d.remoteObj.update(a, b, handleWithPromise)
					}, d.del = function(a) {
						a = a ? a : [d.remoteObj._props.Id], d.remoteObj.del(a, handleWithPromise)
					}, handleWithPromise = function(b, c, d) {
						var e = a.defer();
						return b ? e.reject(b) : d ? e.resolve(c, d) : e.resolve(c), e.promise
					}, d
				}
			};
			return c
		}
	}
]), angular.module("ngForce").provider("sfTemplate", ["$q", "$http", "$templateCache", "$log",
	function(a, b, c) {
		this.$get = function() {
			var a = [".ajax4jsf.javascript.AjaxScript", "/js/perf/stub.js", "/sfdc/JiffyStubs.js"];
			this.setScriptSymbolBlacklist = function(b) {
				if (!(angular.isArray(b) && b.length > 0)) throw new Error("newBlacklist must be an array!");
				a = b
			};
			var d = function(a) {
					return a.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
				},
				e = function(a) {
					var b = _.map(a, d),
						c = _.map(b, function(a) {
							return ".*" + a + ".*?"
						}),
						e = "(" + c.join("|") + ")",
						f = '<script src="' + e + '"></script>',
						g = new RegExp(f, "gi");
					return g
				},
				f = function(b) {
					var c = e(a),
						d = b.replace(c, "");
					return d
				},
				g = {
					fromVf: function(a) {
						var d = b.get(a, {
							cache: c
						}).then(function(a) {
							return a.data
						}).then(f);
						return d
					}
				};
			return g
		}
	}
]), angular.module("ngForce").factory("sfr", ["$q", "$rootScope", "Restangular", "$log",
	function(a, b, c, d) {
		var e = [],
			f = [],
			g = {
				model: function(a, b) {
					var d, e = c.setDefaultHeaders({
						Authorization: "Bearer " + window.apiSid
					}).setBaseUrl("/services/data/v29.0/sobjects/").setRestangularFields({
						id: "Id",
						selfLink: "attributes.url"
					});
					return d = b ? e.one(a, b) : e.all(a)
				},
				insert: function(b, c, f) {
					var g = a.defer();
					if (!angular.isString(b)) return g.reject("An sObject name is required to perform insert."), g.promise;
					var h = angular.isDefined(f) ? f : !1,
						i = e[b];
					return angular.isUndefined(i) && (i = this.model(b), e[b] = i), i.post(c).then(function(a) {
						return a.success ? (d.debug("ngForce: Created new " + b + " record:", a), g.resolve(a), h ? i.get(a.id).then(function(a) {
							return d.debug("ngForce: Inserted:", a), a
						}) : g.promise) : (g.reject("Insert failed: [" + a.errors + "] Full response: " + a), g.promise)
					})
				},
				update: function(b, c, e) {
					var g = a.defer();
					if (!angular.isString(b)) return g.reject("An sObject name is required to perform an update."), g.promise;
					var h = angular.isDefined(e) ? e : !1,
						i = c.id || c.Id;
					if (!angular.isString(i)) return g.reject('An "Id" field is required to perform an update.'), g.promise;
					var j = f[i];
					angular.isUndefined(j) && (j = this.model(b, i), f[i] = j);
					for (var k = ["Id", "LastReferencedDate", "LastModifiedById", "LastModifiedDate", "LastViewedDate", "SystemModstamp", "CreatedById", "CreatedDate", "IsDeleted"], l = 0; l < k.length; l++) {
						var m = k[l];
						delete c[m]
					}
					return j.patch(c).then(function(a) {
						return d.debug("ngForce: Patched " + b + " record:", c), h ? j.get().then(function(c) {
							return d.debug("ngForce: Updated " + b + " record:", a), c
						}) : (g.resolve("Patch successful!"), g.promise)
					})
				},
				"delete": function(b, c) {
					var e = a.defer();
					if (!angular.isString(b)) return e.reject("An sObject name is required to perform a delete."), e.promise;
					var g = c.id || c.Id;
					if (!angular.isString(g)) return e.reject('An "Id" field is required to perform a delete.'), e.promise;
					var h = f[g];
					return angular.isUndefined(h) && (h = this.model(b, g), f[g] = h), h.remove().then(function() {
						return d.debug("ngForce: Deleted " + b + " record:", g), e.resolve("Delete successful!"), e.promise
					})
				}
			};
		return g
	}
]), angular.module("ngForce").factory("sfranalytics", ["$q", "$rootScope", "Restangular",
	function(a, b, c) {
		var d = "/services/data/v29.0/analytics/",
			e = {
				Authorization: "Bearer " + window.apiSid
			},
			f = c.withConfig(function(a) {
				a.setBaseUrl(d), a.setDefaultHeaders(e)
			}).setRestangularFields({
				id: "Id"
			});
		return {
			analytics: function() {
				return f.all("reports")
			},
			reports: {
				metadata: function(a) {
					return f.one("reports", a).get("metadata")
				},
				run: function(b, c) {
					if ("object" != typeof c && (c = {}), c.async === !0) throw "Asnynchronous report runs are not supported at this time";
					var d = {};
					(c.includeDetails === !0 || c.includeDetails === !1) && (d.includeDetails = c.includeDetails);
					var e = c.reportFilters && c.reportFilters.length > 0;
					if (e === !0) {
						var g = a.defer();
						return this.metadata(b).then(function(a) {
							var e = a.reportMetadata;
							("string" == typeof c.reportBooleanFilter || null === c.reportBooleanFilter) && (e.reportBooleanFilter = c.reportBooleanFilter), "[object Array]" === Object.prototype.toString.call(c.reportFilters) && (e.reportFilters = c.reportFilters), f.one("reports").post(b, {
								reportMetadata: e
							}, d).then(function(a) {
								g.resolve(a)
							}, function(a) {
								g.reject(a)
							})
						}), g.promise
					}
					return f.one("reports", b).get(d)
				}
			},
			dashboard: {}
		}
	}
]), angular.module("ngForce").factory("sfrBackend", ["$q", "$rootScope", "$log", "$httpBackend", "encodeUriQuery",
	function(a, b, c, d, e) {
		var f = function(a) {
				return a.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
			},
			g = {
				whenGetPage: function(a, b) {
					var c = a; - 1 == c.indexOf("/apex/") && (c = "/apex/" + c);
					var e = f(c);
					d.whenGET(new RegExp(e, "i")).respond(b)
				},
				whenQuery: function(a, b, c) {
					var g = angular.isString(c) ? [c] : c,
						h = angular.isArray(b) ? b : [b],
						i = "query.*FROM\\++" + a;
					if ("undefined" != typeof g && null !== g) {
						var j = _.chain(g).map(function(a) {
							return e(a)
						}).foldl(function(a, b) {
							return a += b
						}).value();
						i += "\\++WHERE.*" + f(j)
					}
					d.whenGET(new RegExp(i, "i")).respond(200, {
						totalSize: h.length,
						done: !0,
						records: h
					})
				},
				expectQuery: function(a, b, c) {
					var g = angular.isString(c) ? [c] : c,
						h = angular.isArray(b) ? b : [b],
						i = "query.*FROM\\++" + a;
					if ("undefined" != typeof g && null !== g) {
						var j = _.chain(g).map(function(a) {
							return e(a)
						}).foldl(function(a, b) {
							return a += b
						}).value();
						i += "\\++WHERE.*" + f(j)
					}
					d.expectGET(new RegExp(i, "i")).respond(200, {
						totalSize: h.length,
						done: !0,
						records: h
					})
				},
				expectInsert: function(a, b, c) {
					var e = angular.isArray(b) ? b : [b],
						f = c || !0;
					angular.forEach(e, function(b) {
						d.expectPOST(new RegExp(a, "i")).respond(201, {
							id: b.Id,
							success: !0,
							errors: []
						}), f || d.expectGET(new RegExp(a + "/" + b.Id, "i")).respond(200, b)
					})
				},
				expectDelete: function(a, b) {
					b = b || "";
					var c = angular.isArray(b) ? b : [b];
					angular.forEach(c, function(b) {
						d.expectDELETE(new RegExp(a + "/" + b, "i")).respond(201, {})
					})
				}
			};
		return g
	}
]), angular.module("ngForce").factory("sfrquery", ["$q", "$rootScope", "$log", "Restangular", "encodeUriQuery",
	function(a, b, c, d, e) {
		var f = d.withConfig(function(a) {
			a.setDefaultHttpFields({
				cache: !1
			}), a.setBaseUrl("/services/data/v30.0/"), a.setDefaultHeaders({
				Authorization: "Bearer " + window.apiSid
			})
		}).setRestangularFields({
			id: "Id",
			selfLink: "attributes.url"
		}).oneUrl("query", "/services/data/v30.0/query");
		return f.query = function(a, b) {
			return b = "undefined" != typeof b ? b : !1, f.withHttpConfig({
				cache: b
			}).get({
				q: a
			}).then(function(a) {
				return a.records
			})
		}, f.queryAll = function(b, c, d, g) {
			return angular.isUndefined(c) && (c = !0), angular.isUndefined(g) && (g = []), angular.isUndefined(d) && (d = a.defer()), "select" === b.trim().substring(0, 6).toLowerCase() && (b = "?q=" + e(b)), f.withHttpConfig({
				cache: c
			}).customGET(b).then(function(a) {
				return g = g.concat(a.records), a.done ? (d.resolve(g), d.promise) : void f.queryAll(_.last(a.nextRecordsUrl.split("/")), c, d, g)
			}, function(a) {
				return d.reject(a)
			}), d.notify(), d.promise
		}, f
	}
]), angular.module("ngForce").provider("vfr", "$q", [
	function() {
		this.$get = ["$q", "$rootScope",
			function(a, b) {
				function c(a, c, d, e) {
					a ? (a = JSON.parse(a), Array.isArray(a) && a[0].message && a[0].errorCode ? (e.reject(a), b.$safeApply()) : (e.resolve(a), b.$safeApply())) : "undefined" != typeof d && d ? (e.resolve(), b.$safeApply()) : (e.reject({
						message: "Null returned by RemoteAction not called with nullOk flag",
						errorCode: "NULL_RETURN"
					}), b.$safeApply())
				}
				if ("object" != typeof Visualforce) throw new Error("Visualforce is not available as an object! Did you forget to include the ngForce component?");
				var d = {};
				d.send = function(b, d, e) {
					var f, g, h, i = Visualforce.remoting.Manager,
						j = b.split(".");
					if (d && "object" != typeof d) throw new Error("Options must be an object");
					if (j.length < 2) throw new Error("Invalid Remote Action specified. Use Controller.MethodName or $RemoteAction.Controller.MethodName");
					return 3 === j.length ? (f = j[0], g = j[1], h = j[2]) : 2 === j.length && (g = j[0], h = j[1]),
						function() {
							var f, g = a.defer();
							return f = arguments.length ? Array.prototype.slice.apply(arguments) : [], f.splice(0, 0, b), f.push(function(a, b) {
								c(a, b, e, g)
							}), d && f.push(d), i.invokeAction.apply(i, f), g.promise
						}
				};
				var e = {
					escape: !1,
					timeout: 1e4
				};
				return this.setStandardOptions = function(a) {
					if (a && "object" != typeof a) throw new Error("standardOptions must be an object");
					e = a
				}, d.bulkCreate = d.send("ngForceController.bulkCreate", e, !1), d.bulkUpdate = d.send("ngForceController.bulkUpdate", e, !1), d.create = d.send("ngForceController.create", e, !1), d.clone = d.send("ngForceController.sObjectKlone", e, !1), d.del = d.send("ngForceController.del", e, !0), d.describe = d.send("ngForceController.describe", e, !1), d.describeFieldSet = d.send("ngForceController.describeFieldSet", e, !1), d.describePicklistValues = d.send("ngForceController.getPicklistValues", e, !1), d.getObjectType = d.send("ngForceController.getObjType", e, !1), d.getQueryResultsAsSelect2Data = d.send("ngForceController.getQueryResultsAsSelect2Data", e, !1), d.query = d.send("ngForceController.query", {
					escape: !1,
					timeout: 3e4
				}, !1), d.queryFromFieldset = d.send("ngForceController.queryFromFieldSet", {
					escape: !1,
					timeout: 3e4
				}, !1), d.retrieve = d.send("ngForceController.retrieve", e, !1), d.search = d.send("ngForceController.search", e, !1), d.soqlFromFieldSet = d.send("ngForceController.soqlFromFieldSet", e, !1), d.update = d.send("ngForceController.updat", e, !0), d.upsert = d.send("ngForceController.upser", e, !0), d
			}
		]
	}
]), angular.module("ngForce", ["Scope.safeApply", "restangular"]);
//# sourceMappingURL=ngForce.min.map